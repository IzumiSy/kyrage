import { ColumnValue, DatabaseValue } from "../schema";
import { ColumnDataType } from "kysely";

/**
 * Defines a column in a table.
 */
export const column = (
  type: ColumnDataType,
  options?: Partial<Omit<ColumnValue, "type">>
) => ({
  type,
  notNull: options?.notNull,
  primaryKey: options?.primaryKey,
  unique: options?.unique,
  defaultSql: options?.defaultSql,
});

type DefinedColumn = ReturnType<typeof column>;

type ExpressionBuilders<T extends Record<string, DefinedColumn>> = {
  /**
   * Creates an index on the specified columns.
   *
   * The default is non-unique, and name is autogenerated by joining the column names by underscores.
   */
  index: (
    /**
     * The columns to include in the index.
     */
    columns: Array<keyof T>,
    /**
     * Index options
     */
    options?: {
      /**
       * The name of the index.
       */
      name?: string;

      /**
       * Whether the index is unique.
       */
      unique?: boolean;
    }
  ) => unknown;
};

/**
 * Defines a table with its columns and optional expression builders.
 */
export const defineTable = <T extends Record<string, DefinedColumn>>(
  /**
   * The name of the table.
   */
  name: string,

  /**
   * The columns in the table.
   */
  columns: T,

  /**
   * The expression builders for the table.
   *
   * This is where you can define additional indexes, constraints, or other
   * database-specific features for the table.
   */
  tableExpBuilder?: (builder: ExpressionBuilders<T>) => Array<unknown>
) => {
  const indexBuilder: ExpressionBuilders<T>["index"] = (
    columnnNames,
    options
  ) => ({
    columnnNames,
    options: {
      name: options?.name ?? `idx_${columnnNames.join("_")}`,
      unique: options?.unique ?? false,
    },
  });

  return {
    tableName: name,
    tableExpression: tableExpBuilder
      ? tableExpBuilder({
          index: indexBuilder,
        })
      : [],
    columns,
  };
};

export type DefinedTable = ReturnType<typeof defineTable>;
export type DefinedTables = Array<DefinedTable>;

export type DefineConfigProp = {
  database: DatabaseValue;
  tables: DefinedTables;
};

export const defineConfig = (config: DefineConfigProp) => config;
